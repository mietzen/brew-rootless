name: Sync Fork

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch: # on button click

jobs:
  sync:
    runs-on: macos-latest
    steps:
      - uses: actions/create-github-app-token@v1
        id: generate-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ steps.generate-token.outputs.token }}
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.generate-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
      - name: Set Commiter Credentials
        run: |
          git config --global user.name '${{ steps.generate-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.generate-token.outputs.app-slug }}[bot]@users.noreply.github.com'
      - name: get latest homebrew tag
        id: latest_homebrew_tag
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          name=$(gh release list --repo homebrew/brew --exclude-drafts --exclude-pre-releases --limit 1 --json tagName | jq '.[].tagName' -r)
          echo "Latest homebrew brew tag: ${name}"
          echo "tag=${name}" >> "$GITHUB_OUTPUT"
      - name: get latest rootless brew tag
        id: latest_rootless_brew_tag
        run: |
          name=$(git tag --list --sort="-version:refname" | head -n1)
          echo "Latest rootless brew tag: ${name}"
          echo "tag=${name}" >> "$GITHUB_OUTPUT"
      - name: Merge upstream release to master
        if: ${{ steps.latest_rootless_brew_tag.outputs.tag != steps.latest_homebrew_tag.outputs.tag }}
        env:
          LATEST_TAG: ${{ steps.latest_homebrew_tag.outputs.tag }}
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          git config --local merge.ours.driver "true"
          git remote add upstream https://github.com/homebrew/brew.git
          git fetch --verbose upstream master
          git fetch --verbose upstream tag ${LATEST_TAG} --no-tags
          git merge --no-edit ${LATEST_TAG}
          git push
      - name: Test new release
        if: ${{ steps.latest_rootless_brew_tag.outputs.tag != steps.latest_homebrew_tag.outputs.tag }}
        run: |
          mkdir -p $HOME/.local/opt
          mkdir -p $HOME/Applications
          git clone https://github.com/${{ github.repository }} $HOME/.local/opt/homebrew
          export PATH="$HOME/.local/opt/homebrew/bin:$PATH"
          brew developer on
          brew update
          brew install --cask keka
          if [ -d $HOME/Applications/Keka.app ]; then
            echo "Keka exists."
          else
            echo "Keka does not exist."
            exit 1
          fi
          brew install --formula az
          if [ -e $HOME/.local/opt/homebrew/bin/az ]; then
            echo "az exists."
          else
            echo "az does not exist."
            exit 1
          fi
      - name: Tag and Release
        if: ${{ steps.latest_rootless_brew_tag.outputs.tag != steps.latest_homebrew_tag.outputs.tag }}
        env:
          CURRENT_TAG: ${{ steps.latest_rootless_brew_tag.outputs.tag }}
          LATEST_TAG: ${{ steps.latest_homebrew_tag.outputs.tag }}
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          git tag -f ${LATEST_TAG}
          git push --tags
          echo "**Automated release via workflow**" > release_notes.md
          echo "" >> release_notes.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${CURRENT_TAG}...${LATEST_TAG}" >> release_notes.md
          echo "" >> release_notes.md
          echo "# Upstream Release Notes:" >> release_notes.md
          echo "" >> release_notes.md
          gh release view ${LATEST_TAG} --repo Homebrew/brew --json body --jq '.body' | sed 's/@//g' >> release_notes.md
          cat release_notes.md
          gh release create ${LATEST_TAG} \
            --title ${LATEST_TAG} \
            --verify-tag \
            --repo ${{ github.repository }} \
            --notes-file release_notes.md
